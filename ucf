#!/usr/bin/env python3
import sys

import argparse
from typing import Any

import unicorefuzz.unicorefuzz
from unicorefuzz import configspec
from unicorefuzz.configspec import serialize_spec, UNICOREFUZZ_SPEC
from unicorefuzz.harness import Harness
from unicorefuzz.probe_wrapper import ProbeWrapper


def load_conf(args: argparse.Namespace) -> Any:
    """
    Loads the config from args
    :param args: the arguments
    :return: a loaded config
    """
    return configspec.load_config(args.config)


# Note: The docstring will be used as commandline help for these funcs
def print_spec(args: argparse.Namespace) -> None:
    """
    Outputs expected config.py spec.
    """
    print(serialize_spec(UNICOREFUZZ_SPEC))


def wrap_probe(args: argparse.Namespace) -> None:
    """
    Attach, break and forward memory from target
    Former probewrapper.py
    """
    ProbeWrapper(load_conf(args)).wrap_gdb_target()


def emulate(args: argparse.Namespace) -> None:
    """
    Drop the memory in the harness and start the emulation
    Former harness.py
    """
    Harness(load_conf(args)).harness(args.input_file, debug=args.debug, trace=args.trace, wait=args.wait)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Unicorefuzz, emulate kernels with AFL++-Unicorn"
    )
    subparsers = parser.add_subparsers(help="What unicorefuzz function to use.")

    config_printer = subparsers.add_parser("spec", help=print_spec.__doc__)
    config_printer.set_defaults(function=print_spec)

    probe_wrapper = subparsers.add_parser("wrap", help=wrap_probe.__doc__)
    probe_wrapper.set_defaults(function=wrap_probe)

    probe_wrapper.add_argument(
        "-c", "--config", type=str, default="config.py", help="The config file to use."
    )

    harness = subparsers.add_parser("emu", aliases={"emulate"}, help=emulate.__doc__)
    harness.set_defaults(function=emulate)

    harness.add_argument(
        "input_file",
        type=str,
        help="Path to the file containing the mutated input to load",
    )
    harness.add_argument(
        "-c", "--config", type=str, default="config.py", help="The config file to use."
    )
    harness.add_argument(
        "-d",
        "--debug",
        default=False,
        action="store_true",
        help="Starts the testcase in uUdbg (if installed)",
    )
    harness.add_argument(
        "-t",
        "--trace",
        default=False,
        action="store_true",
        help="Enables debug tracing",
    )
    harness.add_argument(
        "-w",
        "--wait",
        default=False,
        action="store_true",
        help="Wait for the state directory to be present",
    )

    args = parser.parse_args()

    if hasattr(args, "function"):
        args.function(args)
    else:
        parser.print_help()
